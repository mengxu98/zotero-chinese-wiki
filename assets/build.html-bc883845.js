import{_ as u}from"./image-build-pr预览-1-ff0e06d5.js";import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as h,c as g,a as e,b as i,d as n,w as a,e as s}from"./app-301a6e00.js";const _="/wiki/assets/image-fork-repo-1-af2a708d.png",b="/wiki/assets/image-fork-repo-2-1-b6d26307.png",m="/wiki/assets/8c581efa5ed9f3ac9d5771b89204bd6b_MD5-8c25c214.png",f="/wiki/assets/741b873973ac5df93faf93cd1a195db2_MD5-50986c65.png",k="/wiki/assets/28f02608aa879ed189ecfecfcab57d16_MD5-86994762.png",v="/wiki/assets/image-build-安装依赖-1-4b2b48a7.png",w="/wiki/assets/image-build-创建新分支-1-bd6f6ac8.png",x="/wiki/assets/image-build-启动开发服务器-1-f837bc01.png",G="/wiki/assets/image-build-dev-server-1-9d52fe6c.png",z="/wiki/assets/image-build-提交修改-1-db6247f5.png",y="/wiki/assets/image-build-推送修改-1-d863bef4.png",H="/wiki/assets/image-build-更新main分支-1-b110b0f4.png",P={},q=e("h1",{id:"构建指南",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#构建指南","aria-hidden":"true"},"#"),i(" 构建指南")],-1),R=e("h2",{id:"项目概览",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#项目概览","aria-hidden":"true"},"#"),i(" 项目概览")],-1),A=e("p",null,"本文档使用 Markdown 语法编写，产生的 Markdown 文件托管在 GitHub 上。使用 VuePress 作为静态页面生成器将 Markdown 文件构建为 HTML，使用 VuePress-theme-hope 作为 VuePress 的主题拓展其语法和布局。使用 Netlify 作为持续集成供应商。",-1),D={href:"https://github.com/zotero-chinese/wiki/",target:"_blank",rel:"noopener noreferrer"},M=s('<p>以下介绍了一次完整修改所需的步骤。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>为了降低操作门槛，本指南所述操作步骤均尽可能使用了图形化界面。对于熟悉 Git 的同学，仍可使用自己喜欢的方式进行操作。</p></div><h2 id="环境配置" tabindex="-1"><a class="header-anchor" href="#环境配置" aria-hidden="true">#</a> 环境配置</h2><h3 id="所需软件安装" tabindex="-1"><a class="header-anchor" href="#所需软件安装" aria-hidden="true">#</a> 所需软件安装</h3><p>本文的需要 Node.js 和 Git 安装在你的电脑上，后续步骤假定你已经安装这些程序且可以简单使用，若没有安装这些软件请跟随本小节指引完成安装。</p><p>为了方便编辑和提交，我们还推荐安装 <code>VS Code</code> 和 <code>GitHub Desktop</code> 两个软件。</p>',6),V={class:"hint-container details"},N=e("summary",null,"安装 Git",-1),C=e("p",null,[i("所有文档均使用 "),e("code",null,"Git"),i(" 进行版本控制。以下步骤假定")],-1),E=e("p",null,"用户已安装 git。若未安装，可以使用以下命令安装或更新 git：",-1),L=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"sudo"),i(" dnf "),e("span",{class:"token function"},"install"),i(),e("span",{class:"token function"},"git"),i(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),S=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"sudo"),i(),e("span",{class:"token function"},"apt"),i(),e("span",{class:"token function"},"install"),i(),e("span",{class:"token function"},"git"),i(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),B=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[i("brew "),e("span",{class:"token function"},"install"),i(),e("span",{class:"token function"},"git"),i(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),T={href:"https://git-scm.com/downloads/",target:"_blank",rel:"noopener noreferrer"},U=s(`<p>安装完成后，还需设置个人信息。打开终端，运行以下命令</p><p>（将 &quot;zotero-user&quot; 和 &quot;&lt;zotero-user@gmail. com&gt;&quot; 替换成个人对应的信息）:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置用户姓名和邮箱</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;zotero-user&quot;</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;zotero-user@gmail.com&quot;</span>

<span class="token comment"># 查看 ~/.gitconfig</span>
$ <span class="token function">cat</span> ~/.gitconfig
<span class="token punctuation">[</span>user<span class="token punctuation">]</span>
    name <span class="token operator">=</span> zotero-user
    email <span class="token operator">=</span> zotero-user@gmail.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),W={class:"hint-container details"},$=e("summary",null,"Git 和 GitHub 学习资料",-1),j=e("p",null,"以下修改文档并提交的步骤中使用了 Git 的一些常用选项，可以参考以下资料学习更多用法：",-1),F={href:"http://rogerdudler.github.io/git-guide/index.zh.html",target:"_blank",rel:"noopener noreferrer"},I={href:"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000",target:"_blank",rel:"noopener noreferrer"},O={href:"http://www.worldhello.net/gotgithub/index.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://www.freecodecamp.org/news/practical-git-and-git-workflows/amp/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://git-scm.com/book/zh/",target:"_blank",rel:"noopener noreferrer"},Q=e("p",null,"GitHub 相关资料：",-1),X={href:"https://docs.github.com/cn/github",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://guides.github.com/introduction/flow/",target:"_blank",rel:"noopener noreferrer"},Z=e("details",{class:"hint-container details"},[e("summary",null,"安装 Node.js"),e("p",null,"安装 Node. js")],-1),ee=e("details",{class:"hint-container details"},[e("summary",null,"安装 VS Code"),e("p",null,"安装")],-1),ie={class:"hint-container details"},ne=e("summary",null,"安装 GitHub Desktop",-1),te={href:"https://desktop.github.com/",target:"_blank",rel:"noopener noreferrer"},ae=e("h3",{id:"克隆和复制仓库",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#克隆和复制仓库","aria-hidden":"true"},"#"),i(" 克隆和复制仓库")],-1),se=e("p",null,"复制 (fork) 仓库至个人 GitHub 帐号",-1),oe={href:"https://github.com/zotero-chinese/wiki/",target:"_blank",rel:"noopener noreferrer"},le=e("figure",null,[e("img",{src:_,alt:"复刻仓库",tabindex:"0",loading:"lazy"}),e("figcaption",null,"复刻仓库")],-1),re=e("figure",null,[e("img",{src:b,alt:"复刻仓库2",tabindex:"0",loading:"lazy"}),e("figcaption",null,"复刻仓库2")],-1),ce={href:"https://github.com/zotero-user/wiki/",target:"_blank",rel:"noopener noreferrer"},de=s('<p>克隆个人 GitHub 帐号下的复刻仓库到本地（复刻仓库默认是本地克隆仓库的远程 origin）</p><p>打开 VS Code，点击 <code>欢迎页面</code> 的 <code>克隆 Git 仓库…</code>，在弹出窗口中选中 <code>从 GitHub 克隆</code>，然后选择自己账户下的 fork 仓库，确认，克隆完成后根据提示打开文件夹。</p><figure><img src="'+m+'" alt="克隆Git仓库" tabindex="0" loading="lazy"><figcaption>克隆Git仓库</figcaption></figure><figure><img src="'+f+'" alt="从GitHub克隆" tabindex="0" loading="lazy"><figcaption>从GitHub克隆</figcaption></figure><figure><img src="'+k+'" alt="选择仓库" tabindex="0" loading="lazy"><figcaption>选择仓库</figcaption></figure>',5),ue={class:"hint-container tip"},pe=e("p",{class:"hint-container-title"},"提示",-1),he={href:"https://desktop.github.com/",target:"_blank",rel:"noopener noreferrer"},ge=s(`<h3 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h3><p>通过下面的命令安装依赖项。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+v+'" alt="安装依赖" tabindex="0" loading="lazy"><figcaption>安装依赖</figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>上述“环境配置”步骤只需在第一次修改代码时执行一次，一旦复制或克隆某仓库后，就无需再次复制或克隆。</p></div><h2 id="修改文档" tabindex="-1"><a class="header-anchor" href="#修改文档" aria-hidden="true">#</a> 修改文档</h2>',6),_e=s('<li><p>在本地创建并切换至新分支，假定新分支名为 <code>pr-workflow</code>（分支名需简短、描述性且独特）:</p><figure><img src="'+w+`" alt="创建新分支" tabindex="0" loading="lazy"><figcaption>创建新分支</figcaption></figure></li><li><p>启动开发服务器<br> 使用以下命令启动开发服务器，如下图，开发服务器启动后，会给出几个本地链接，访问任一链接（通常为 Local）即可得到预览。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run docs:dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+x+'" alt="启动开服务器" tabindex="0" loading="lazy"><figcaption>启动开服务器</figcaption></figure><p>开发服务器会监听所有 <code>.md</code> 文件的修改，当有文件发生保存时，服务器会自动更新预览并刷新网页。</p><figure><img src="'+G+'" alt="开发服务器" tabindex="0" loading="lazy"><figcaption>开发服务器</figcaption></figure></li>',2),be=e("p",null,"在新建分支中对文档做修改，修改过程中，可以随时在浏览器中检查修改效果",-1),me=s('<li><p>提交 commit</p><p>在左侧 &quot; 源代码管理 &quot; 选项卡中，输入一个简短的提交描述，点击提交，然后将修改推送到线上。</p><figure><img src="'+z+'" alt="提交修改" tabindex="0" loading="lazy"><figcaption>提交修改</figcaption></figure><figure><img src="'+y+'" alt="推送修改" tabindex="0" loading="lazy"><figcaption>推送修改</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如前所述，提交命令也可以在 GitHub Desktop 中完成。</p></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不建议直接在 main 分支中进行修改和提交，这可能会给你自己造成麻烦。</p><p>仓库对 main 分支开启了推送保护，对 main 分支的修改只能通过 Pull Request 进行，无法直接 Push。</p></div></li>',1),fe=e("h2",{id:"pull-request",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pull-request","aria-hidden":"true"},"#"),i(" Pull Request")],-1),ke=e("p",null,"提交 PR",-1),ve={href:"https://github.com/%E4%BD%A0%E7%9A%84%E5%90%8D%E5%AD%97/wiki/",target:"_blank",rel:"noopener noreferrer"},we=e("p",null,"一般 GitHub 会自动提示有可提交的 PR，点击 “Compare & pull request”，输入此 PR 的标题和具体描述，",-1),xe=e("p",null,"最后点击 “Create pull request” 即可。",-1),Ge=s('<li><p>审核、评论以及修改 PR</p><p>文档维护者收到 PR 后，会对代码进行审核、评论以及修改，并决定是否接受（merge）或结束该 PR。</p><p>PR 发起后，Netlify 机器人会自动部署一个预览版本，可以在这里查看预览。</p><figure><img src="'+u+'" alt="netlify预览pr" tabindex="0" loading="lazy"><figcaption>netlify预览pr</figcaption></figure><p>提交的 PR 在接收前可能需要读者多次修改。这种情况并不要创建新 PR，只需继续本地 pr-workflow 分支中修改并提交，然后再次推送 pr-workflow 分支至远程 origin 即可，修改将自动添加到已提交的 PR 中。</p><p>推送新的修改后，可以选择在该 PR 中留言，以通知维护者已提交新的修改。</p></li><li><p>PR 被接受并合并至官方 main 分支后，则可以更新 main 分支，并删除 pr-workflow 分支</p><figure><img src="'+H+'" alt="更新main分支" tabindex="0" loading="lazy"><figcaption>更新main分支</figcaption></figure></li>',2),ze=s('<h2 id="其他的脚本" tabindex="-1"><a class="header-anchor" href="#其他的脚本" aria-hidden="true">#</a> 其他的脚本</h2><h3 id="npm-run-docs-build" tabindex="-1"><a class="header-anchor" href="#npm-run-docs-build" aria-hidden="true">#</a> npm run docs:build</h3><p>构建脚本，用于将 markdown 构建为网页。</p><p>贡献者可以在提交前运行一次，查看是否有报错。</p><p>一般情况下，图片路径错误、链接错误会导致报错。</p><h3 id="npm-run-lint" tabindex="-1"><a class="header-anchor" href="#npm-run-lint" aria-hidden="true">#</a> npm run lint</h3><p>运行 Markdown Lint。</p>',7);function ye(He,Pe){const t=r("ExternalLinkIcon"),c=r("Tabs"),d=r("RouterLink");return h(),g("div",null,[q,R,A,e("p",null,[i("目前仓库地址为 "),e("a",D,[i("https://github.com/zotero-chinese/wiki/"),n(t)]),i(" ，")]),M,e("details",V,[N,C,E,n(c,{id:"39",data:[{id:"Fedora"},{id:"Ubuntu/Debian"},{id:"macOS"},{id:"Windows"}]},{title0:a(({value:o,isActive:l})=>[i("Fedora")]),title1:a(({value:o,isActive:l})=>[i("Ubuntu/Debian")]),title2:a(({value:o,isActive:l})=>[i("macOS")]),title3:a(({value:o,isActive:l})=>[i("Windows")]),tab0:a(({value:o,isActive:l})=>[L]),tab1:a(({value:o,isActive:l})=>[S]),tab2:a(({value:o,isActive:l})=>[B]),tab3:a(({value:o,isActive:l})=>[e("p",null,[i("打开 "),e("a",T,[i("https://git-scm.com/downloads/"),n(t)]),i(" ，下载并安装 Git for Windows。")])]),_:1}),U,e("details",W,[$,j,e("ul",null,[e("li",null,[e("a",F,[i("git 简明指南"),n(t)])]),e("li",null,[e("a",I,[i("廖雪峰的 Git 教程"),n(t)])]),e("li",null,[e("a",O,[i("GotGitHub"),n(t)])]),e("li",null,[e("a",J,[i("How to Use Git and Git Workflows – a Practical Guide"),n(t)])]),e("li",null,[e("a",K,[i("Pro Git"),n(t)])])]),Q,e("ul",null,[e("li",null,[e("a",X,[i("GitHub 中文文档"),n(t)])]),e("li",null,[e("a",Y,[i("Understanding the GitHub flow"),n(t)])])])])]),Z,ee,e("details",ie,[ne,e("p",null,[i("安装 "),e("a",te,[i("https://desktop.github.com/"),n(t)])])]),ae,e("ol",null,[e("li",null,[se,e("p",null,[i("点击项目主页 "),e("a",oe,[i("https://github.com/zotero-chinese/wiki/"),n(t)]),i(" 右上角的 Fork 按钮，将该项目复刻到个人 GitHub 账户下。")]),le,re,e("p",null,[i("复制完成后，个人 GitHub 帐号下便有了 "),e("a",ce,[i("https://github.com/zotero-user/wiki/"),n(t)]),i(" 仓库。")])]),e("li",null,[de,e("div",ue,[pe,e("p",null,[i("如果你对 Git 或命令行不了解，可以考虑使用 "),e("a",he,[i("Github 客户端"),n(t)]),i(" 或 VS Code 提供的图形化版本控制管理器作为命令行的替代。")])])])]),ge,e("ol",null,[_e,e("li",null,[be,e("p",null,[i("使用 Markdown 语法编写文档，如果你不清楚本文档所用的 Markdown 语法，请参阅 "),n(d,{to:"/contributing/markdown.html"},{default:a(()=>[i("Markdown 语法")]),_:1}),i("。")])]),me]),fe,e("ol",null,[e("li",null,[ke,e("p",null,[i("进入个人 GitHub 帐号下的复制仓库（即 "),e("a",ve,[i("https://github.com/你的名字/wiki/"),n(t)]),i("）。")]),we,xe]),Ge]),ze])}const De=p(P,[["render",ye],["__file","build.html.vue"]]);export{De as default};
